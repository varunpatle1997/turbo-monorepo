import { badRequest, unauthorized } from '@hapi/boom';
import { STORAGE_PROVIDERS } from '../../env.js';
import { artifactsEvents, getArtifact, getStatus, headArtifact, putArtifact, } from './routes/index.js';
import { createLocation } from './storage/index.js';
async function turboRemoteCache(instance, options) {
    const bodyLimit = instance.config.BODY_LIMIT;
    const { allowedTokens, apiVersion = 'v8', provider = STORAGE_PROVIDERS.LOCAL, } = options;
    if (!(Array.isArray(allowedTokens) && allowedTokens.length)) {
        throw new Error(`'allowedTokens' options must be a string[], ${typeof allowedTokens} provided instead`);
    }
    instance.addContentTypeParser('application/octet-stream', { parseAs: 'buffer', bodyLimit }, async function parser(request, payload) {
        return payload;
    });
    instance.decorate('location', createLocation(provider, {
        accessKey: instance.config.S3_ACCESS_KEY,
        secretKey: instance.config.S3_SECRET_KEY,
        path: instance.config.STORAGE_PATH,
        region: instance.config.S3_REGION,
        endpoint: instance.config.S3_ENDPOINT,
        clientEmail: instance.config.GCS_CLIENT_EMAIL,
        privateKey: instance.config.GCS_PRIVATE_KEY?.replace(/\\n/g, '\n'),
        projectId: instance.config.GCS_PROJECT_ID,
        useTmp: !!instance.config.STORAGE_PATH_USE_TMP_FOLDER,
        connectionString: instance.config.ABS_CONNECTION_STRING,
    }));
    await instance.register(async function (i) {
        const tokens = new Set(allowedTokens);
        i.addHook('onRequest', async function (request) {
            let authHeader = request.headers.authorization;
            authHeader = Array.isArray(authHeader) ? authHeader.join() : authHeader;
            if (!authHeader) {
                throw badRequest('Missing Authorization header');
            }
            const [, token] = authHeader.split('Bearer ');
            if (!tokens.has(token)) {
                throw unauthorized('Invalid authorization token');
            }
        });
        i.route(getArtifact);
        i.route(headArtifact);
        i.route(putArtifact);
        i.route(artifactsEvents);
    }, { prefix: `/${apiVersion}` });
    await instance.register(async (i) => {
        i.route(getStatus);
    }, { prefix: `/${apiVersion}` });
}
export default turboRemoteCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGx1Z2lucy9yZW1vdGUtY2FjaGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ2hELE9BQU8sRUFDTCxlQUFlLEVBQ2YsV0FBVyxFQUNYLFNBQVMsRUFDVCxZQUFZLEVBQ1osV0FBVyxHQUNaLE1BQU0sbUJBQW1CLENBQUE7QUFDMUIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRW5ELEtBQUssVUFBVSxnQkFBZ0IsQ0FDN0IsUUFBeUIsRUFDekIsT0FJQztJQUVELE1BQU0sU0FBUyxHQUFXLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFBO0lBQ3BELE1BQU0sRUFDSixhQUFhLEVBQ2IsVUFBVSxHQUFHLElBQUksRUFDakIsUUFBUSxHQUFHLGlCQUFpQixDQUFDLEtBQUssR0FDbkMsR0FBRyxPQUFPLENBQUE7SUFDWCxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMzRCxNQUFNLElBQUksS0FBSyxDQUNiLCtDQUErQyxPQUFPLGFBQWEsbUJBQW1CLENBQ3ZGLENBQUE7S0FDRjtJQUVELFFBQVEsQ0FBQyxvQkFBb0IsQ0FDM0IsMEJBQTBCLEVBQzFCLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsRUFDaEMsS0FBSyxVQUFVLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTztRQUNwQyxPQUFPLE9BQU8sQ0FBQTtJQUNoQixDQUFDLENBQ0YsQ0FBQTtJQUVELFFBQVEsQ0FBQyxRQUFRLENBQ2YsVUFBVSxFQUNWLGNBQWMsQ0FBQyxRQUFRLEVBQUU7UUFDdkIsU0FBUyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYTtRQUN4QyxTQUFTLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhO1FBQ3hDLElBQUksRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVk7UUFDbEMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUztRQUNqQyxRQUFRLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXO1FBQ3JDLFdBQVcsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQjtRQUM3QyxVQUFVLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7UUFDbEUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYztRQUN6QyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsMkJBQTJCO1FBQ3JELGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMscUJBQXFCO0tBQ3hELENBQUMsQ0FDSCxDQUFBO0lBRUQsTUFBTSxRQUFRLENBQUMsUUFBUSxDQUNyQixLQUFLLFdBQVcsQ0FBQztRQUNmLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFTLGFBQWEsQ0FBQyxDQUFBO1FBRTdDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssV0FBVyxPQUFPO1lBQzVDLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFBO1lBQzlDLFVBQVUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQTtZQUV2RSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNmLE1BQU0sVUFBVSxDQUFDLDhCQUE4QixDQUFDLENBQUE7YUFDakQ7WUFDRCxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN0QixNQUFNLFlBQVksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO2FBQ2xEO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3BCLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDckIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNwQixDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQzFCLENBQUMsRUFDRCxFQUFFLE1BQU0sRUFBRSxJQUFJLFVBQVUsRUFBRSxFQUFFLENBQzdCLENBQUE7SUFFRCxNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQ3JCLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNWLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDcEIsQ0FBQyxFQUNELEVBQUUsTUFBTSxFQUFFLElBQUksVUFBVSxFQUFFLEVBQUUsQ0FDN0IsQ0FBQTtBQUNILENBQUM7QUFFRCxlQUFlLGdCQUFnQixDQUFBIn0=